version: 2.1

orbs:
  node: circleci/node@5.0.2
  sonarcloud: sonarsource/sonarcloud@3.0.0

jobs:
  security-checks:
    docker:
      - image: cimg/node:20.11.1
    steps:
      - checkout
      #Add sonarcloud orb for security analysis
      - sonarcloud/setup:  # Initialize Sonar scanner
          organization: "ali-assan"  # Replace with your org name
      - run:
          name: Install backend packages
          working_directory: server
          command: npm install
      - run:
          name: Run npm audit for backend
          working_directory: server
          command: npm audit --production
      - run:
          name: Install frontend packages
          working_directory: client
          command: npm install
      - run:
          name: Run npm audit for frontend
          working_directory: client
          command: npm audit --production --audit-level=high
      #Add Sonar Scan step
      - run:
          name: SonarCloud Scan
          command: |
            sonar-scanner \
              -Dsonar.projectKey=aliassan_ST10494900_APDS7311w \
              -Dsonar.organization=aliassan \
              -Dsonar.sources=. \
              -Dsonar.javascript.node.version=20 \
              -Dsonar.login=${SONAR_TOKEN}

  backend-tests:
    docker:
      - image: cimg/node:20.11.1
      - image: postgres:16-alpine
        environment:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: root
          POSTGRES_DB: payments-portal
    environment:
      DATABASE_URL: postgresql://root:root@localhost:5432/payments-portal
      NODE_ENV: test
    steps:
      - checkout
      - run:
          name: Install mkcert
          command: |
            sudo apt-get update
            sudo apt-get install -y libnss3-tools
            curl -JLO "https://dl.filippo.io/mkcert/latest?for=linux/amd64"
            chmod +x mkcert-v*-linux-amd64
            sudo mv mkcert-v*-linux-amd64 /usr/local/bin/mkcert
            mkcert -install
            cd "$(pwd)"
            mkdir -p server/certs
            mkcert -key-file server/certs/backend-key.pem -cert-file server/certs/backend-cert.pem localhost
            ls -l server/certs/
      - run:
          name: Install backend packages
          working_directory: server
          command: npm install
      - run:
          name: Wait for PostgreSQL
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Generate Prisma client
          working_directory: server
          command: npx prisma generate
      - run:
          name: Run database migrations
          working_directory: server
          command: npx prisma migrate dev --name init
      - run: # Debug certs directory
          name: Debug certs directory
          working_directory: server
          command: ls -l certs
      - run:
          name: Run security tests
          working_directory: server
          command: npm run test:security
      - run:
          name: Run API tests
          working_directory: server
          command: npm run test:api

  frontend-build:
    docker:
      - image: cimg/node:20.11.1
    environment:
      VITE_APP_BACKEND_URL: https://localhost:8082
    steps:
      - checkout
      - run:
          name: Install mkcert
          command: |
            sudo apt-get update
            sudo apt-get install -y libnss3-tools
            curl -JLO "https://dl.filippo.io/mkcert/latest?for=linux/amd64"
            chmod +x mkcert-v*-linux-amd64
            sudo mv mkcert-v*-linux-amd64 /usr/local/bin/mkcert
            mkcert -install
      - run:
          name: Generate frontend certs
          working_directory: client
          command: |
            mkdir -p certs
            mkcert -key-file certs/frontend-key.pem -cert-file certs/frontend-cert.pem localhost
      - run:
          name: Install frontend packages
          working_directory: client
          command: npm install
      - run:
          name: Build frontend
          working_directory: client
          command: npm run build

workflows:
  devsecops:
    jobs:
      - security-checks
      - backend-tests:
          requires:
            - security-checks
      - frontend-build:
          requires:
            - security-checks
